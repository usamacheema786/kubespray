worker_processes 1;

user nobody nogroup;
pid /tmp/nginx.pid;
error_log /dev/stdout;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

stream {
    upstream stream_backend {
      zone tcp_servers 64k;
      server {{ hostvars[groups['kube_node'][2]].ansible_host }}:3306; # node1
      server {{ hostvars[groups['kube_master'][0]].ansible_host }}:3306 down; # node2
    }

    server {
        listen 3306;
        proxy_pass stream_backend;
        proxy_connect_timeout 1s;
    }
}


http {
  include mime.types;
  default_type application/octet-stream;
  access_log /dev/stdout combined;
  sendfile off;

  upstream app_server {
    server unix:/tmp/gunicorn.sock fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 8081 default_server;
    return 444;
  }

  server {

    listen 80;
    listen 443 ssl;
    server_name "";

    client_max_body_size 4G;

    ssl_certificate           /etc/ssl/certs/server.pem;
    ssl_certificate_key       /etc/ssl/certs/my-server.key.pem;

    #ssl on;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    keepalive_timeout 5;

    location  /v1/ {
      resolver 10.96.0.10 valid=5s;
      set $upstream_web  web.doosra-vpc.svc.cluster.local;
      proxy_pass http://$upstream_web:8081;
      proxy_redirect off;
      proxy_request_buffering off;
    }

    location / {
      resolver 10.96.0.10 valid=5s;
      set $upstream_app  app.doosra-vpc.svc.cluster.local;
      proxy_pass http://$upstream_app:3000;
      proxy_redirect off;
      proxy_request_buffering off;
    }
  }
}
